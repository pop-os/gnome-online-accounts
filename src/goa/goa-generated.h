/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GOA_GENERATED_H__
#define __GOA_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Account */

#define GOA_TYPE_ACCOUNT (goa_account_get_type ())
#define GOA_ACCOUNT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_ACCOUNT, GoaAccount))
#define GOA_IS_ACCOUNT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_ACCOUNT))
#define GOA_ACCOUNT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_ACCOUNT, GoaAccountIface))

struct _GoaAccount;
typedef struct _GoaAccount GoaAccount;
typedef struct _GoaAccountIface GoaAccountIface;

struct _GoaAccountIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_ensure_credentials) (
    GoaAccount *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove) (
    GoaAccount *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_attention_needed) (GoaAccount *object);

  gboolean  (*get_calendar_disabled) (GoaAccount *object);

  gboolean  (*get_chat_disabled) (GoaAccount *object);

  gboolean  (*get_contacts_disabled) (GoaAccount *object);

  gboolean  (*get_documents_disabled) (GoaAccount *object);

  const gchar * (*get_id) (GoaAccount *object);

  const gchar * (*get_identity) (GoaAccount *object);

  gboolean  (*get_is_temporary) (GoaAccount *object);

  gboolean  (*get_mail_disabled) (GoaAccount *object);

  const gchar * (*get_presentation_identity) (GoaAccount *object);

  const gchar * (*get_provider_icon) (GoaAccount *object);

  const gchar * (*get_provider_name) (GoaAccount *object);

  const gchar * (*get_provider_type) (GoaAccount *object);

  gboolean  (*get_ticketing_disabled) (GoaAccount *object);

  gboolean  (*get_files_disabled) (GoaAccount *object);

  gboolean  (*get_photos_disabled) (GoaAccount *object);

  gboolean  (*get_printers_disabled) (GoaAccount *object);

  gboolean  (*get_read_later_disabled) (GoaAccount *object);

  gboolean  (*get_maps_disabled) (GoaAccount *object);

  gboolean  (*get_is_locked) (GoaAccount *object);

  gboolean  (*get_music_disabled) (GoaAccount *object);

  gboolean  (*get_todo_disabled) (GoaAccount *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaAccount, g_object_unref)
#endif

GType goa_account_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_account_interface_info (void);
guint goa_account_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_account_complete_remove (
    GoaAccount *object,
    GDBusMethodInvocation *invocation);

void goa_account_complete_ensure_credentials (
    GoaAccount *object,
    GDBusMethodInvocation *invocation,
    gint expires_in);



/* D-Bus method calls: */
void goa_account_call_remove (
    GoaAccount *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_account_call_remove_finish (
    GoaAccount *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_account_call_remove_sync (
    GoaAccount *proxy,
    GCancellable *cancellable,
    GError **error);

void goa_account_call_ensure_credentials (
    GoaAccount *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_account_call_ensure_credentials_finish (
    GoaAccount *proxy,
    gint *out_expires_in,
    GAsyncResult *res,
    GError **error);

gboolean goa_account_call_ensure_credentials_sync (
    GoaAccount *proxy,
    gint *out_expires_in,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *goa_account_get_provider_type (GoaAccount *object);
gchar *goa_account_dup_provider_type (GoaAccount *object);
void goa_account_set_provider_type (GoaAccount *object, const gchar *value);

const gchar *goa_account_get_provider_name (GoaAccount *object);
gchar *goa_account_dup_provider_name (GoaAccount *object);
void goa_account_set_provider_name (GoaAccount *object, const gchar *value);

const gchar *goa_account_get_provider_icon (GoaAccount *object);
gchar *goa_account_dup_provider_icon (GoaAccount *object);
void goa_account_set_provider_icon (GoaAccount *object, const gchar *value);

const gchar *goa_account_get_id (GoaAccount *object);
gchar *goa_account_dup_id (GoaAccount *object);
void goa_account_set_id (GoaAccount *object, const gchar *value);

gboolean goa_account_get_is_locked (GoaAccount *object);
void goa_account_set_is_locked (GoaAccount *object, gboolean value);

gboolean goa_account_get_is_temporary (GoaAccount *object);
void goa_account_set_is_temporary (GoaAccount *object, gboolean value);

gboolean goa_account_get_attention_needed (GoaAccount *object);
void goa_account_set_attention_needed (GoaAccount *object, gboolean value);

const gchar *goa_account_get_identity (GoaAccount *object);
gchar *goa_account_dup_identity (GoaAccount *object);
void goa_account_set_identity (GoaAccount *object, const gchar *value);

const gchar *goa_account_get_presentation_identity (GoaAccount *object);
gchar *goa_account_dup_presentation_identity (GoaAccount *object);
void goa_account_set_presentation_identity (GoaAccount *object, const gchar *value);

gboolean goa_account_get_mail_disabled (GoaAccount *object);
void goa_account_set_mail_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_calendar_disabled (GoaAccount *object);
void goa_account_set_calendar_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_contacts_disabled (GoaAccount *object);
void goa_account_set_contacts_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_chat_disabled (GoaAccount *object);
void goa_account_set_chat_disabled (GoaAccount *object, gboolean value);

G_GNUC_DEPRECATED gboolean goa_account_get_documents_disabled (GoaAccount *object);
G_GNUC_DEPRECATED void goa_account_set_documents_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_maps_disabled (GoaAccount *object);
void goa_account_set_maps_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_music_disabled (GoaAccount *object);
void goa_account_set_music_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_printers_disabled (GoaAccount *object);
void goa_account_set_printers_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_photos_disabled (GoaAccount *object);
void goa_account_set_photos_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_files_disabled (GoaAccount *object);
void goa_account_set_files_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_ticketing_disabled (GoaAccount *object);
void goa_account_set_ticketing_disabled (GoaAccount *object, gboolean value);

G_GNUC_DEPRECATED gboolean goa_account_get_todo_disabled (GoaAccount *object);
G_GNUC_DEPRECATED void goa_account_set_todo_disabled (GoaAccount *object, gboolean value);

gboolean goa_account_get_read_later_disabled (GoaAccount *object);
void goa_account_set_read_later_disabled (GoaAccount *object, gboolean value);


/* ---- */

#define GOA_TYPE_ACCOUNT_PROXY (goa_account_proxy_get_type ())
#define GOA_ACCOUNT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_ACCOUNT_PROXY, GoaAccountProxy))
#define GOA_ACCOUNT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_ACCOUNT_PROXY, GoaAccountProxyClass))
#define GOA_ACCOUNT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_ACCOUNT_PROXY, GoaAccountProxyClass))
#define GOA_IS_ACCOUNT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_ACCOUNT_PROXY))
#define GOA_IS_ACCOUNT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_ACCOUNT_PROXY))

typedef struct _GoaAccountProxy GoaAccountProxy;
typedef struct _GoaAccountProxyClass GoaAccountProxyClass;
typedef struct _GoaAccountProxyPrivate GoaAccountProxyPrivate;

struct _GoaAccountProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaAccountProxyPrivate *priv;
};

struct _GoaAccountProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_account_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaAccountProxy, g_object_unref)
#endif

void goa_account_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaAccount *goa_account_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaAccount *goa_account_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_account_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaAccount *goa_account_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaAccount *goa_account_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_ACCOUNT_SKELETON (goa_account_skeleton_get_type ())
#define GOA_ACCOUNT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_ACCOUNT_SKELETON, GoaAccountSkeleton))
#define GOA_ACCOUNT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_ACCOUNT_SKELETON, GoaAccountSkeletonClass))
#define GOA_ACCOUNT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_ACCOUNT_SKELETON, GoaAccountSkeletonClass))
#define GOA_IS_ACCOUNT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_ACCOUNT_SKELETON))
#define GOA_IS_ACCOUNT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_ACCOUNT_SKELETON))

typedef struct _GoaAccountSkeleton GoaAccountSkeleton;
typedef struct _GoaAccountSkeletonClass GoaAccountSkeletonClass;
typedef struct _GoaAccountSkeletonPrivate GoaAccountSkeletonPrivate;

struct _GoaAccountSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaAccountSkeletonPrivate *priv;
};

struct _GoaAccountSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_account_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaAccountSkeleton, g_object_unref)
#endif

GoaAccount *goa_account_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.OAuth2Based */

#define GOA_TYPE_OAUTH2_BASED (goa_oauth2_based_get_type ())
#define GOA_OAUTH2_BASED(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH2_BASED, GoaOAuth2Based))
#define GOA_IS_OAUTH2_BASED(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH2_BASED))
#define GOA_OAUTH2_BASED_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_OAUTH2_BASED, GoaOAuth2BasedIface))

struct _GoaOAuth2Based;
typedef struct _GoaOAuth2Based GoaOAuth2Based;
typedef struct _GoaOAuth2BasedIface GoaOAuth2BasedIface;

struct _GoaOAuth2BasedIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_access_token) (
    GoaOAuth2Based *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_client_id) (GoaOAuth2Based *object);

  const gchar * (*get_client_secret) (GoaOAuth2Based *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaOAuth2Based, g_object_unref)
#endif

GType goa_oauth2_based_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_oauth2_based_interface_info (void);
guint goa_oauth2_based_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_oauth2_based_complete_get_access_token (
    GoaOAuth2Based *object,
    GDBusMethodInvocation *invocation,
    const gchar *access_token,
    gint expires_in);



/* D-Bus method calls: */
void goa_oauth2_based_call_get_access_token (
    GoaOAuth2Based *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_oauth2_based_call_get_access_token_finish (
    GoaOAuth2Based *proxy,
    gchar **out_access_token,
    gint *out_expires_in,
    GAsyncResult *res,
    GError **error);

gboolean goa_oauth2_based_call_get_access_token_sync (
    GoaOAuth2Based *proxy,
    gchar **out_access_token,
    gint *out_expires_in,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *goa_oauth2_based_get_client_id (GoaOAuth2Based *object);
gchar *goa_oauth2_based_dup_client_id (GoaOAuth2Based *object);
void goa_oauth2_based_set_client_id (GoaOAuth2Based *object, const gchar *value);

const gchar *goa_oauth2_based_get_client_secret (GoaOAuth2Based *object);
gchar *goa_oauth2_based_dup_client_secret (GoaOAuth2Based *object);
void goa_oauth2_based_set_client_secret (GoaOAuth2Based *object, const gchar *value);


/* ---- */

#define GOA_TYPE_OAUTH2_BASED_PROXY (goa_oauth2_based_proxy_get_type ())
#define GOA_OAUTH2_BASED_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH2_BASED_PROXY, GoaOAuth2BasedProxy))
#define GOA_OAUTH2_BASED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OAUTH2_BASED_PROXY, GoaOAuth2BasedProxyClass))
#define GOA_OAUTH2_BASED_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OAUTH2_BASED_PROXY, GoaOAuth2BasedProxyClass))
#define GOA_IS_OAUTH2_BASED_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH2_BASED_PROXY))
#define GOA_IS_OAUTH2_BASED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OAUTH2_BASED_PROXY))

typedef struct _GoaOAuth2BasedProxy GoaOAuth2BasedProxy;
typedef struct _GoaOAuth2BasedProxyClass GoaOAuth2BasedProxyClass;
typedef struct _GoaOAuth2BasedProxyPrivate GoaOAuth2BasedProxyPrivate;

struct _GoaOAuth2BasedProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaOAuth2BasedProxyPrivate *priv;
};

struct _GoaOAuth2BasedProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_oauth2_based_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaOAuth2BasedProxy, g_object_unref)
#endif

void goa_oauth2_based_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaOAuth2Based *goa_oauth2_based_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaOAuth2Based *goa_oauth2_based_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_oauth2_based_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaOAuth2Based *goa_oauth2_based_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaOAuth2Based *goa_oauth2_based_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_OAUTH2_BASED_SKELETON (goa_oauth2_based_skeleton_get_type ())
#define GOA_OAUTH2_BASED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH2_BASED_SKELETON, GoaOAuth2BasedSkeleton))
#define GOA_OAUTH2_BASED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OAUTH2_BASED_SKELETON, GoaOAuth2BasedSkeletonClass))
#define GOA_OAUTH2_BASED_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OAUTH2_BASED_SKELETON, GoaOAuth2BasedSkeletonClass))
#define GOA_IS_OAUTH2_BASED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH2_BASED_SKELETON))
#define GOA_IS_OAUTH2_BASED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OAUTH2_BASED_SKELETON))

typedef struct _GoaOAuth2BasedSkeleton GoaOAuth2BasedSkeleton;
typedef struct _GoaOAuth2BasedSkeletonClass GoaOAuth2BasedSkeletonClass;
typedef struct _GoaOAuth2BasedSkeletonPrivate GoaOAuth2BasedSkeletonPrivate;

struct _GoaOAuth2BasedSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaOAuth2BasedSkeletonPrivate *priv;
};

struct _GoaOAuth2BasedSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_oauth2_based_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaOAuth2BasedSkeleton, g_object_unref)
#endif

GoaOAuth2Based *goa_oauth2_based_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.OAuthBased */

#define GOA_TYPE_OAUTH_BASED (goa_oauth_based_get_type ())
#define GOA_OAUTH_BASED(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH_BASED, GoaOAuthBased))
#define GOA_IS_OAUTH_BASED(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH_BASED))
#define GOA_OAUTH_BASED_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_OAUTH_BASED, GoaOAuthBasedIface))

struct _GoaOAuthBased;
typedef struct _GoaOAuthBased GoaOAuthBased;
typedef struct _GoaOAuthBasedIface GoaOAuthBasedIface;

struct _GoaOAuthBasedIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_access_token) (
    GoaOAuthBased *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_consumer_key) (GoaOAuthBased *object);

  const gchar * (*get_consumer_secret) (GoaOAuthBased *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaOAuthBased, g_object_unref)
#endif

GType goa_oauth_based_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_oauth_based_interface_info (void);
guint goa_oauth_based_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_oauth_based_complete_get_access_token (
    GoaOAuthBased *object,
    GDBusMethodInvocation *invocation,
    const gchar *access_token,
    const gchar *access_token_secret,
    gint expires_in);



/* D-Bus method calls: */
void goa_oauth_based_call_get_access_token (
    GoaOAuthBased *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_oauth_based_call_get_access_token_finish (
    GoaOAuthBased *proxy,
    gchar **out_access_token,
    gchar **out_access_token_secret,
    gint *out_expires_in,
    GAsyncResult *res,
    GError **error);

gboolean goa_oauth_based_call_get_access_token_sync (
    GoaOAuthBased *proxy,
    gchar **out_access_token,
    gchar **out_access_token_secret,
    gint *out_expires_in,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *goa_oauth_based_get_consumer_key (GoaOAuthBased *object);
gchar *goa_oauth_based_dup_consumer_key (GoaOAuthBased *object);
void goa_oauth_based_set_consumer_key (GoaOAuthBased *object, const gchar *value);

const gchar *goa_oauth_based_get_consumer_secret (GoaOAuthBased *object);
gchar *goa_oauth_based_dup_consumer_secret (GoaOAuthBased *object);
void goa_oauth_based_set_consumer_secret (GoaOAuthBased *object, const gchar *value);


/* ---- */

#define GOA_TYPE_OAUTH_BASED_PROXY (goa_oauth_based_proxy_get_type ())
#define GOA_OAUTH_BASED_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH_BASED_PROXY, GoaOAuthBasedProxy))
#define GOA_OAUTH_BASED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OAUTH_BASED_PROXY, GoaOAuthBasedProxyClass))
#define GOA_OAUTH_BASED_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OAUTH_BASED_PROXY, GoaOAuthBasedProxyClass))
#define GOA_IS_OAUTH_BASED_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH_BASED_PROXY))
#define GOA_IS_OAUTH_BASED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OAUTH_BASED_PROXY))

typedef struct _GoaOAuthBasedProxy GoaOAuthBasedProxy;
typedef struct _GoaOAuthBasedProxyClass GoaOAuthBasedProxyClass;
typedef struct _GoaOAuthBasedProxyPrivate GoaOAuthBasedProxyPrivate;

struct _GoaOAuthBasedProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaOAuthBasedProxyPrivate *priv;
};

struct _GoaOAuthBasedProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_oauth_based_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaOAuthBasedProxy, g_object_unref)
#endif

void goa_oauth_based_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaOAuthBased *goa_oauth_based_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaOAuthBased *goa_oauth_based_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_oauth_based_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaOAuthBased *goa_oauth_based_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaOAuthBased *goa_oauth_based_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_OAUTH_BASED_SKELETON (goa_oauth_based_skeleton_get_type ())
#define GOA_OAUTH_BASED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH_BASED_SKELETON, GoaOAuthBasedSkeleton))
#define GOA_OAUTH_BASED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OAUTH_BASED_SKELETON, GoaOAuthBasedSkeletonClass))
#define GOA_OAUTH_BASED_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OAUTH_BASED_SKELETON, GoaOAuthBasedSkeletonClass))
#define GOA_IS_OAUTH_BASED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH_BASED_SKELETON))
#define GOA_IS_OAUTH_BASED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OAUTH_BASED_SKELETON))

typedef struct _GoaOAuthBasedSkeleton GoaOAuthBasedSkeleton;
typedef struct _GoaOAuthBasedSkeletonClass GoaOAuthBasedSkeletonClass;
typedef struct _GoaOAuthBasedSkeletonPrivate GoaOAuthBasedSkeletonPrivate;

struct _GoaOAuthBasedSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaOAuthBasedSkeletonPrivate *priv;
};

struct _GoaOAuthBasedSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_oauth_based_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaOAuthBasedSkeleton, g_object_unref)
#endif

GoaOAuthBased *goa_oauth_based_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.PasswordBased */

#define GOA_TYPE_PASSWORD_BASED (goa_password_based_get_type ())
#define GOA_PASSWORD_BASED(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PASSWORD_BASED, GoaPasswordBased))
#define GOA_IS_PASSWORD_BASED(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PASSWORD_BASED))
#define GOA_PASSWORD_BASED_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_PASSWORD_BASED, GoaPasswordBasedIface))

struct _GoaPasswordBased;
typedef struct _GoaPasswordBased GoaPasswordBased;
typedef struct _GoaPasswordBasedIface GoaPasswordBasedIface;

struct _GoaPasswordBasedIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_password) (
    GoaPasswordBased *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPasswordBased, g_object_unref)
#endif

GType goa_password_based_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_password_based_interface_info (void);
guint goa_password_based_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_password_based_complete_get_password (
    GoaPasswordBased *object,
    GDBusMethodInvocation *invocation,
    const gchar *password);



/* D-Bus method calls: */
void goa_password_based_call_get_password (
    GoaPasswordBased *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_password_based_call_get_password_finish (
    GoaPasswordBased *proxy,
    gchar **out_password,
    GAsyncResult *res,
    GError **error);

gboolean goa_password_based_call_get_password_sync (
    GoaPasswordBased *proxy,
    const gchar *arg_id,
    gchar **out_password,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GOA_TYPE_PASSWORD_BASED_PROXY (goa_password_based_proxy_get_type ())
#define GOA_PASSWORD_BASED_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PASSWORD_BASED_PROXY, GoaPasswordBasedProxy))
#define GOA_PASSWORD_BASED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_PASSWORD_BASED_PROXY, GoaPasswordBasedProxyClass))
#define GOA_PASSWORD_BASED_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_PASSWORD_BASED_PROXY, GoaPasswordBasedProxyClass))
#define GOA_IS_PASSWORD_BASED_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PASSWORD_BASED_PROXY))
#define GOA_IS_PASSWORD_BASED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_PASSWORD_BASED_PROXY))

typedef struct _GoaPasswordBasedProxy GoaPasswordBasedProxy;
typedef struct _GoaPasswordBasedProxyClass GoaPasswordBasedProxyClass;
typedef struct _GoaPasswordBasedProxyPrivate GoaPasswordBasedProxyPrivate;

struct _GoaPasswordBasedProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaPasswordBasedProxyPrivate *priv;
};

struct _GoaPasswordBasedProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_password_based_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPasswordBasedProxy, g_object_unref)
#endif

void goa_password_based_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaPasswordBased *goa_password_based_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaPasswordBased *goa_password_based_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_password_based_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaPasswordBased *goa_password_based_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaPasswordBased *goa_password_based_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_PASSWORD_BASED_SKELETON (goa_password_based_skeleton_get_type ())
#define GOA_PASSWORD_BASED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PASSWORD_BASED_SKELETON, GoaPasswordBasedSkeleton))
#define GOA_PASSWORD_BASED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_PASSWORD_BASED_SKELETON, GoaPasswordBasedSkeletonClass))
#define GOA_PASSWORD_BASED_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_PASSWORD_BASED_SKELETON, GoaPasswordBasedSkeletonClass))
#define GOA_IS_PASSWORD_BASED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PASSWORD_BASED_SKELETON))
#define GOA_IS_PASSWORD_BASED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_PASSWORD_BASED_SKELETON))

typedef struct _GoaPasswordBasedSkeleton GoaPasswordBasedSkeleton;
typedef struct _GoaPasswordBasedSkeletonClass GoaPasswordBasedSkeletonClass;
typedef struct _GoaPasswordBasedSkeletonPrivate GoaPasswordBasedSkeletonPrivate;

struct _GoaPasswordBasedSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaPasswordBasedSkeletonPrivate *priv;
};

struct _GoaPasswordBasedSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_password_based_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPasswordBasedSkeleton, g_object_unref)
#endif

GoaPasswordBased *goa_password_based_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Manager */

#define GOA_TYPE_MANAGER (goa_manager_get_type ())
#define GOA_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MANAGER, GoaManager))
#define GOA_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MANAGER))
#define GOA_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_MANAGER, GoaManagerIface))

struct _GoaManager;
typedef struct _GoaManager GoaManager;
typedef struct _GoaManagerIface GoaManagerIface;

struct _GoaManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add_account) (
    GoaManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_provider,
    const gchar *arg_identity,
    const gchar *arg_presentation_identity,
    GVariant *arg_credentials,
    GVariant *arg_details);

  gboolean (*handle_is_supported_provider) (
    GoaManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_provider_type);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaManager, g_object_unref)
#endif

GType goa_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_manager_interface_info (void);
guint goa_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_manager_complete_add_account (
    GoaManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *account_object_path);

void goa_manager_complete_is_supported_provider (
    GoaManager *object,
    GDBusMethodInvocation *invocation,
    gboolean is_supported);



/* D-Bus method calls: */
void goa_manager_call_add_account (
    GoaManager *proxy,
    const gchar *arg_provider,
    const gchar *arg_identity,
    const gchar *arg_presentation_identity,
    GVariant *arg_credentials,
    GVariant *arg_details,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_manager_call_add_account_finish (
    GoaManager *proxy,
    gchar **out_account_object_path,
    GAsyncResult *res,
    GError **error);

gboolean goa_manager_call_add_account_sync (
    GoaManager *proxy,
    const gchar *arg_provider,
    const gchar *arg_identity,
    const gchar *arg_presentation_identity,
    GVariant *arg_credentials,
    GVariant *arg_details,
    gchar **out_account_object_path,
    GCancellable *cancellable,
    GError **error);

void goa_manager_call_is_supported_provider (
    GoaManager *proxy,
    const gchar *arg_provider_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_manager_call_is_supported_provider_finish (
    GoaManager *proxy,
    gboolean *out_is_supported,
    GAsyncResult *res,
    GError **error);

gboolean goa_manager_call_is_supported_provider_sync (
    GoaManager *proxy,
    const gchar *arg_provider_type,
    gboolean *out_is_supported,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GOA_TYPE_MANAGER_PROXY (goa_manager_proxy_get_type ())
#define GOA_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MANAGER_PROXY, GoaManagerProxy))
#define GOA_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MANAGER_PROXY, GoaManagerProxyClass))
#define GOA_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MANAGER_PROXY, GoaManagerProxyClass))
#define GOA_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MANAGER_PROXY))
#define GOA_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MANAGER_PROXY))

typedef struct _GoaManagerProxy GoaManagerProxy;
typedef struct _GoaManagerProxyClass GoaManagerProxyClass;
typedef struct _GoaManagerProxyPrivate GoaManagerProxyPrivate;

struct _GoaManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaManagerProxyPrivate *priv;
};

struct _GoaManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaManagerProxy, g_object_unref)
#endif

void goa_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaManager *goa_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaManager *goa_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaManager *goa_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaManager *goa_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_MANAGER_SKELETON (goa_manager_skeleton_get_type ())
#define GOA_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MANAGER_SKELETON, GoaManagerSkeleton))
#define GOA_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MANAGER_SKELETON, GoaManagerSkeletonClass))
#define GOA_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MANAGER_SKELETON, GoaManagerSkeletonClass))
#define GOA_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MANAGER_SKELETON))
#define GOA_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MANAGER_SKELETON))

typedef struct _GoaManagerSkeleton GoaManagerSkeleton;
typedef struct _GoaManagerSkeletonClass GoaManagerSkeletonClass;
typedef struct _GoaManagerSkeletonPrivate GoaManagerSkeletonPrivate;

struct _GoaManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaManagerSkeletonPrivate *priv;
};

struct _GoaManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaManagerSkeleton, g_object_unref)
#endif

GoaManager *goa_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Mail */

#define GOA_TYPE_MAIL (goa_mail_get_type ())
#define GOA_MAIL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MAIL, GoaMail))
#define GOA_IS_MAIL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MAIL))
#define GOA_MAIL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_MAIL, GoaMailIface))

struct _GoaMail;
typedef struct _GoaMail GoaMail;
typedef struct _GoaMailIface GoaMailIface;

struct _GoaMailIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_email_address) (GoaMail *object);

  const gchar * (*get_imap_host) (GoaMail *object);

  gboolean  (*get_imap_supported) (GoaMail *object);

  gboolean  (*get_imap_use_tls) (GoaMail *object);

  const gchar * (*get_imap_user_name) (GoaMail *object);

  const gchar * (*get_smtp_host) (GoaMail *object);

  gboolean  (*get_smtp_supported) (GoaMail *object);

  gboolean  (*get_smtp_use_tls) (GoaMail *object);

  const gchar * (*get_smtp_user_name) (GoaMail *object);

  gboolean  (*get_imap_accept_ssl_errors) (GoaMail *object);

  gboolean  (*get_imap_use_ssl) (GoaMail *object);

  const gchar * (*get_name) (GoaMail *object);

  gboolean  (*get_smtp_accept_ssl_errors) (GoaMail *object);

  gboolean  (*get_smtp_use_auth) (GoaMail *object);

  gboolean  (*get_smtp_use_ssl) (GoaMail *object);

  gboolean  (*get_smtp_auth_login) (GoaMail *object);

  gboolean  (*get_smtp_auth_plain) (GoaMail *object);

  gboolean  (*get_smtp_auth_xoauth2) (GoaMail *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMail, g_object_unref)
#endif

GType goa_mail_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_mail_interface_info (void);
guint goa_mail_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *goa_mail_get_email_address (GoaMail *object);
gchar *goa_mail_dup_email_address (GoaMail *object);
void goa_mail_set_email_address (GoaMail *object, const gchar *value);

const gchar *goa_mail_get_name (GoaMail *object);
gchar *goa_mail_dup_name (GoaMail *object);
void goa_mail_set_name (GoaMail *object, const gchar *value);

gboolean goa_mail_get_imap_supported (GoaMail *object);
void goa_mail_set_imap_supported (GoaMail *object, gboolean value);

gboolean goa_mail_get_imap_accept_ssl_errors (GoaMail *object);
void goa_mail_set_imap_accept_ssl_errors (GoaMail *object, gboolean value);

const gchar *goa_mail_get_imap_host (GoaMail *object);
gchar *goa_mail_dup_imap_host (GoaMail *object);
void goa_mail_set_imap_host (GoaMail *object, const gchar *value);

gboolean goa_mail_get_imap_use_ssl (GoaMail *object);
void goa_mail_set_imap_use_ssl (GoaMail *object, gboolean value);

gboolean goa_mail_get_imap_use_tls (GoaMail *object);
void goa_mail_set_imap_use_tls (GoaMail *object, gboolean value);

const gchar *goa_mail_get_imap_user_name (GoaMail *object);
gchar *goa_mail_dup_imap_user_name (GoaMail *object);
void goa_mail_set_imap_user_name (GoaMail *object, const gchar *value);

gboolean goa_mail_get_smtp_supported (GoaMail *object);
void goa_mail_set_smtp_supported (GoaMail *object, gboolean value);

gboolean goa_mail_get_smtp_accept_ssl_errors (GoaMail *object);
void goa_mail_set_smtp_accept_ssl_errors (GoaMail *object, gboolean value);

const gchar *goa_mail_get_smtp_host (GoaMail *object);
gchar *goa_mail_dup_smtp_host (GoaMail *object);
void goa_mail_set_smtp_host (GoaMail *object, const gchar *value);

gboolean goa_mail_get_smtp_use_auth (GoaMail *object);
void goa_mail_set_smtp_use_auth (GoaMail *object, gboolean value);

gboolean goa_mail_get_smtp_auth_login (GoaMail *object);
void goa_mail_set_smtp_auth_login (GoaMail *object, gboolean value);

gboolean goa_mail_get_smtp_auth_plain (GoaMail *object);
void goa_mail_set_smtp_auth_plain (GoaMail *object, gboolean value);

gboolean goa_mail_get_smtp_auth_xoauth2 (GoaMail *object);
void goa_mail_set_smtp_auth_xoauth2 (GoaMail *object, gboolean value);

gboolean goa_mail_get_smtp_use_ssl (GoaMail *object);
void goa_mail_set_smtp_use_ssl (GoaMail *object, gboolean value);

gboolean goa_mail_get_smtp_use_tls (GoaMail *object);
void goa_mail_set_smtp_use_tls (GoaMail *object, gboolean value);

const gchar *goa_mail_get_smtp_user_name (GoaMail *object);
gchar *goa_mail_dup_smtp_user_name (GoaMail *object);
void goa_mail_set_smtp_user_name (GoaMail *object, const gchar *value);


/* ---- */

#define GOA_TYPE_MAIL_PROXY (goa_mail_proxy_get_type ())
#define GOA_MAIL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MAIL_PROXY, GoaMailProxy))
#define GOA_MAIL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MAIL_PROXY, GoaMailProxyClass))
#define GOA_MAIL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MAIL_PROXY, GoaMailProxyClass))
#define GOA_IS_MAIL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MAIL_PROXY))
#define GOA_IS_MAIL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MAIL_PROXY))

typedef struct _GoaMailProxy GoaMailProxy;
typedef struct _GoaMailProxyClass GoaMailProxyClass;
typedef struct _GoaMailProxyPrivate GoaMailProxyPrivate;

struct _GoaMailProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaMailProxyPrivate *priv;
};

struct _GoaMailProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_mail_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMailProxy, g_object_unref)
#endif

void goa_mail_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMail *goa_mail_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMail *goa_mail_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_mail_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMail *goa_mail_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMail *goa_mail_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_MAIL_SKELETON (goa_mail_skeleton_get_type ())
#define GOA_MAIL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MAIL_SKELETON, GoaMailSkeleton))
#define GOA_MAIL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MAIL_SKELETON, GoaMailSkeletonClass))
#define GOA_MAIL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MAIL_SKELETON, GoaMailSkeletonClass))
#define GOA_IS_MAIL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MAIL_SKELETON))
#define GOA_IS_MAIL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MAIL_SKELETON))

typedef struct _GoaMailSkeleton GoaMailSkeleton;
typedef struct _GoaMailSkeletonClass GoaMailSkeletonClass;
typedef struct _GoaMailSkeletonPrivate GoaMailSkeletonPrivate;

struct _GoaMailSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaMailSkeletonPrivate *priv;
};

struct _GoaMailSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_mail_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMailSkeleton, g_object_unref)
#endif

GoaMail *goa_mail_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Calendar */

#define GOA_TYPE_CALENDAR (goa_calendar_get_type ())
#define GOA_CALENDAR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CALENDAR, GoaCalendar))
#define GOA_IS_CALENDAR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CALENDAR))
#define GOA_CALENDAR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_CALENDAR, GoaCalendarIface))

struct _GoaCalendar;
typedef struct _GoaCalendar GoaCalendar;
typedef struct _GoaCalendarIface GoaCalendarIface;

struct _GoaCalendarIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_accept_ssl_errors) (GoaCalendar *object);

  const gchar * (*get_uri) (GoaCalendar *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaCalendar, g_object_unref)
#endif

GType goa_calendar_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_calendar_interface_info (void);
guint goa_calendar_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean goa_calendar_get_accept_ssl_errors (GoaCalendar *object);
void goa_calendar_set_accept_ssl_errors (GoaCalendar *object, gboolean value);

const gchar *goa_calendar_get_uri (GoaCalendar *object);
gchar *goa_calendar_dup_uri (GoaCalendar *object);
void goa_calendar_set_uri (GoaCalendar *object, const gchar *value);


/* ---- */

#define GOA_TYPE_CALENDAR_PROXY (goa_calendar_proxy_get_type ())
#define GOA_CALENDAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CALENDAR_PROXY, GoaCalendarProxy))
#define GOA_CALENDAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_CALENDAR_PROXY, GoaCalendarProxyClass))
#define GOA_CALENDAR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_CALENDAR_PROXY, GoaCalendarProxyClass))
#define GOA_IS_CALENDAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CALENDAR_PROXY))
#define GOA_IS_CALENDAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_CALENDAR_PROXY))

typedef struct _GoaCalendarProxy GoaCalendarProxy;
typedef struct _GoaCalendarProxyClass GoaCalendarProxyClass;
typedef struct _GoaCalendarProxyPrivate GoaCalendarProxyPrivate;

struct _GoaCalendarProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaCalendarProxyPrivate *priv;
};

struct _GoaCalendarProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_calendar_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaCalendarProxy, g_object_unref)
#endif

void goa_calendar_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaCalendar *goa_calendar_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaCalendar *goa_calendar_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_calendar_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaCalendar *goa_calendar_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaCalendar *goa_calendar_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_CALENDAR_SKELETON (goa_calendar_skeleton_get_type ())
#define GOA_CALENDAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CALENDAR_SKELETON, GoaCalendarSkeleton))
#define GOA_CALENDAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_CALENDAR_SKELETON, GoaCalendarSkeletonClass))
#define GOA_CALENDAR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_CALENDAR_SKELETON, GoaCalendarSkeletonClass))
#define GOA_IS_CALENDAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CALENDAR_SKELETON))
#define GOA_IS_CALENDAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_CALENDAR_SKELETON))

typedef struct _GoaCalendarSkeleton GoaCalendarSkeleton;
typedef struct _GoaCalendarSkeletonClass GoaCalendarSkeletonClass;
typedef struct _GoaCalendarSkeletonPrivate GoaCalendarSkeletonPrivate;

struct _GoaCalendarSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaCalendarSkeletonPrivate *priv;
};

struct _GoaCalendarSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_calendar_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaCalendarSkeleton, g_object_unref)
#endif

GoaCalendar *goa_calendar_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Contacts */

#define GOA_TYPE_CONTACTS (goa_contacts_get_type ())
#define GOA_CONTACTS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CONTACTS, GoaContacts))
#define GOA_IS_CONTACTS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CONTACTS))
#define GOA_CONTACTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_CONTACTS, GoaContactsIface))

struct _GoaContacts;
typedef struct _GoaContacts GoaContacts;
typedef struct _GoaContactsIface GoaContactsIface;

struct _GoaContactsIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_accept_ssl_errors) (GoaContacts *object);

  const gchar * (*get_uri) (GoaContacts *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaContacts, g_object_unref)
#endif

GType goa_contacts_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_contacts_interface_info (void);
guint goa_contacts_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean goa_contacts_get_accept_ssl_errors (GoaContacts *object);
void goa_contacts_set_accept_ssl_errors (GoaContacts *object, gboolean value);

const gchar *goa_contacts_get_uri (GoaContacts *object);
gchar *goa_contacts_dup_uri (GoaContacts *object);
void goa_contacts_set_uri (GoaContacts *object, const gchar *value);


/* ---- */

#define GOA_TYPE_CONTACTS_PROXY (goa_contacts_proxy_get_type ())
#define GOA_CONTACTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CONTACTS_PROXY, GoaContactsProxy))
#define GOA_CONTACTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_CONTACTS_PROXY, GoaContactsProxyClass))
#define GOA_CONTACTS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_CONTACTS_PROXY, GoaContactsProxyClass))
#define GOA_IS_CONTACTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CONTACTS_PROXY))
#define GOA_IS_CONTACTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_CONTACTS_PROXY))

typedef struct _GoaContactsProxy GoaContactsProxy;
typedef struct _GoaContactsProxyClass GoaContactsProxyClass;
typedef struct _GoaContactsProxyPrivate GoaContactsProxyPrivate;

struct _GoaContactsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaContactsProxyPrivate *priv;
};

struct _GoaContactsProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_contacts_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaContactsProxy, g_object_unref)
#endif

void goa_contacts_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaContacts *goa_contacts_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaContacts *goa_contacts_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_contacts_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaContacts *goa_contacts_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaContacts *goa_contacts_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_CONTACTS_SKELETON (goa_contacts_skeleton_get_type ())
#define GOA_CONTACTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CONTACTS_SKELETON, GoaContactsSkeleton))
#define GOA_CONTACTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_CONTACTS_SKELETON, GoaContactsSkeletonClass))
#define GOA_CONTACTS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_CONTACTS_SKELETON, GoaContactsSkeletonClass))
#define GOA_IS_CONTACTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CONTACTS_SKELETON))
#define GOA_IS_CONTACTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_CONTACTS_SKELETON))

typedef struct _GoaContactsSkeleton GoaContactsSkeleton;
typedef struct _GoaContactsSkeletonClass GoaContactsSkeletonClass;
typedef struct _GoaContactsSkeletonPrivate GoaContactsSkeletonPrivate;

struct _GoaContactsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaContactsSkeletonPrivate *priv;
};

struct _GoaContactsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_contacts_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaContactsSkeleton, g_object_unref)
#endif

GoaContacts *goa_contacts_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Chat */

#define GOA_TYPE_CHAT (goa_chat_get_type ())
#define GOA_CHAT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CHAT, GoaChat))
#define GOA_IS_CHAT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CHAT))
#define GOA_CHAT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_CHAT, GoaChatIface))

struct _GoaChat;
typedef struct _GoaChat GoaChat;
typedef struct _GoaChatIface GoaChatIface;

struct _GoaChatIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaChat, g_object_unref)
#endif

GType goa_chat_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_chat_interface_info (void);
guint goa_chat_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_CHAT_PROXY (goa_chat_proxy_get_type ())
#define GOA_CHAT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CHAT_PROXY, GoaChatProxy))
#define GOA_CHAT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_CHAT_PROXY, GoaChatProxyClass))
#define GOA_CHAT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_CHAT_PROXY, GoaChatProxyClass))
#define GOA_IS_CHAT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CHAT_PROXY))
#define GOA_IS_CHAT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_CHAT_PROXY))

typedef struct _GoaChatProxy GoaChatProxy;
typedef struct _GoaChatProxyClass GoaChatProxyClass;
typedef struct _GoaChatProxyPrivate GoaChatProxyPrivate;

struct _GoaChatProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaChatProxyPrivate *priv;
};

struct _GoaChatProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_chat_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaChatProxy, g_object_unref)
#endif

void goa_chat_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaChat *goa_chat_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaChat *goa_chat_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_chat_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaChat *goa_chat_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaChat *goa_chat_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_CHAT_SKELETON (goa_chat_skeleton_get_type ())
#define GOA_CHAT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_CHAT_SKELETON, GoaChatSkeleton))
#define GOA_CHAT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_CHAT_SKELETON, GoaChatSkeletonClass))
#define GOA_CHAT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_CHAT_SKELETON, GoaChatSkeletonClass))
#define GOA_IS_CHAT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_CHAT_SKELETON))
#define GOA_IS_CHAT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_CHAT_SKELETON))

typedef struct _GoaChatSkeleton GoaChatSkeleton;
typedef struct _GoaChatSkeletonClass GoaChatSkeletonClass;
typedef struct _GoaChatSkeletonPrivate GoaChatSkeletonPrivate;

struct _GoaChatSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaChatSkeletonPrivate *priv;
};

struct _GoaChatSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_chat_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaChatSkeleton, g_object_unref)
#endif

GoaChat *goa_chat_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Documents */

#define GOA_TYPE_DOCUMENTS (goa_documents_get_type ())
#define GOA_DOCUMENTS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_DOCUMENTS, GoaDocuments))
#define GOA_IS_DOCUMENTS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_DOCUMENTS))
#define GOA_DOCUMENTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_DOCUMENTS, GoaDocumentsIface))

struct _GoaDocuments;
typedef struct _GoaDocuments GoaDocuments;
typedef struct _GoaDocumentsIface GoaDocumentsIface;

struct _GoaDocumentsIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaDocuments, g_object_unref)
#endif

GType goa_documents_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_documents_interface_info (void);
guint goa_documents_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_DOCUMENTS_PROXY (goa_documents_proxy_get_type ())
#define GOA_DOCUMENTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_DOCUMENTS_PROXY, GoaDocumentsProxy))
#define GOA_DOCUMENTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_DOCUMENTS_PROXY, GoaDocumentsProxyClass))
#define GOA_DOCUMENTS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_DOCUMENTS_PROXY, GoaDocumentsProxyClass))
#define GOA_IS_DOCUMENTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_DOCUMENTS_PROXY))
#define GOA_IS_DOCUMENTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_DOCUMENTS_PROXY))

typedef struct _GoaDocumentsProxy GoaDocumentsProxy;
typedef struct _GoaDocumentsProxyClass GoaDocumentsProxyClass;
typedef struct _GoaDocumentsProxyPrivate GoaDocumentsProxyPrivate;

struct _GoaDocumentsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaDocumentsProxyPrivate *priv;
};

struct _GoaDocumentsProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_documents_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaDocumentsProxy, g_object_unref)
#endif

G_GNUC_DEPRECATED void goa_documents_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
G_GNUC_DEPRECATED GoaDocuments *goa_documents_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
G_GNUC_DEPRECATED GoaDocuments *goa_documents_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

G_GNUC_DEPRECATED void goa_documents_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
G_GNUC_DEPRECATED GoaDocuments *goa_documents_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
G_GNUC_DEPRECATED GoaDocuments *goa_documents_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_DOCUMENTS_SKELETON (goa_documents_skeleton_get_type ())
#define GOA_DOCUMENTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_DOCUMENTS_SKELETON, GoaDocumentsSkeleton))
#define GOA_DOCUMENTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_DOCUMENTS_SKELETON, GoaDocumentsSkeletonClass))
#define GOA_DOCUMENTS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_DOCUMENTS_SKELETON, GoaDocumentsSkeletonClass))
#define GOA_IS_DOCUMENTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_DOCUMENTS_SKELETON))
#define GOA_IS_DOCUMENTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_DOCUMENTS_SKELETON))

typedef struct _GoaDocumentsSkeleton GoaDocumentsSkeleton;
typedef struct _GoaDocumentsSkeletonClass GoaDocumentsSkeletonClass;
typedef struct _GoaDocumentsSkeletonPrivate GoaDocumentsSkeletonPrivate;

struct _GoaDocumentsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaDocumentsSkeletonPrivate *priv;
};

struct _GoaDocumentsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_documents_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaDocumentsSkeleton, g_object_unref)
#endif

G_GNUC_DEPRECATED GoaDocuments *goa_documents_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Maps */

#define GOA_TYPE_MAPS (goa_maps_get_type ())
#define GOA_MAPS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MAPS, GoaMaps))
#define GOA_IS_MAPS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MAPS))
#define GOA_MAPS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_MAPS, GoaMapsIface))

struct _GoaMaps;
typedef struct _GoaMaps GoaMaps;
typedef struct _GoaMapsIface GoaMapsIface;

struct _GoaMapsIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMaps, g_object_unref)
#endif

GType goa_maps_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_maps_interface_info (void);
guint goa_maps_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_MAPS_PROXY (goa_maps_proxy_get_type ())
#define GOA_MAPS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MAPS_PROXY, GoaMapsProxy))
#define GOA_MAPS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MAPS_PROXY, GoaMapsProxyClass))
#define GOA_MAPS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MAPS_PROXY, GoaMapsProxyClass))
#define GOA_IS_MAPS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MAPS_PROXY))
#define GOA_IS_MAPS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MAPS_PROXY))

typedef struct _GoaMapsProxy GoaMapsProxy;
typedef struct _GoaMapsProxyClass GoaMapsProxyClass;
typedef struct _GoaMapsProxyPrivate GoaMapsProxyPrivate;

struct _GoaMapsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaMapsProxyPrivate *priv;
};

struct _GoaMapsProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_maps_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMapsProxy, g_object_unref)
#endif

void goa_maps_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMaps *goa_maps_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMaps *goa_maps_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_maps_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMaps *goa_maps_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMaps *goa_maps_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_MAPS_SKELETON (goa_maps_skeleton_get_type ())
#define GOA_MAPS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MAPS_SKELETON, GoaMapsSkeleton))
#define GOA_MAPS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MAPS_SKELETON, GoaMapsSkeletonClass))
#define GOA_MAPS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MAPS_SKELETON, GoaMapsSkeletonClass))
#define GOA_IS_MAPS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MAPS_SKELETON))
#define GOA_IS_MAPS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MAPS_SKELETON))

typedef struct _GoaMapsSkeleton GoaMapsSkeleton;
typedef struct _GoaMapsSkeletonClass GoaMapsSkeletonClass;
typedef struct _GoaMapsSkeletonPrivate GoaMapsSkeletonPrivate;

struct _GoaMapsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaMapsSkeletonPrivate *priv;
};

struct _GoaMapsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_maps_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMapsSkeleton, g_object_unref)
#endif

GoaMaps *goa_maps_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Music */

#define GOA_TYPE_MUSIC (goa_music_get_type ())
#define GOA_MUSIC(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MUSIC, GoaMusic))
#define GOA_IS_MUSIC(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MUSIC))
#define GOA_MUSIC_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_MUSIC, GoaMusicIface))

struct _GoaMusic;
typedef struct _GoaMusic GoaMusic;
typedef struct _GoaMusicIface GoaMusicIface;

struct _GoaMusicIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMusic, g_object_unref)
#endif

GType goa_music_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_music_interface_info (void);
guint goa_music_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_MUSIC_PROXY (goa_music_proxy_get_type ())
#define GOA_MUSIC_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MUSIC_PROXY, GoaMusicProxy))
#define GOA_MUSIC_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MUSIC_PROXY, GoaMusicProxyClass))
#define GOA_MUSIC_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MUSIC_PROXY, GoaMusicProxyClass))
#define GOA_IS_MUSIC_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MUSIC_PROXY))
#define GOA_IS_MUSIC_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MUSIC_PROXY))

typedef struct _GoaMusicProxy GoaMusicProxy;
typedef struct _GoaMusicProxyClass GoaMusicProxyClass;
typedef struct _GoaMusicProxyPrivate GoaMusicProxyPrivate;

struct _GoaMusicProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaMusicProxyPrivate *priv;
};

struct _GoaMusicProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_music_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMusicProxy, g_object_unref)
#endif

void goa_music_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMusic *goa_music_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMusic *goa_music_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_music_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMusic *goa_music_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMusic *goa_music_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_MUSIC_SKELETON (goa_music_skeleton_get_type ())
#define GOA_MUSIC_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MUSIC_SKELETON, GoaMusicSkeleton))
#define GOA_MUSIC_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MUSIC_SKELETON, GoaMusicSkeletonClass))
#define GOA_MUSIC_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MUSIC_SKELETON, GoaMusicSkeletonClass))
#define GOA_IS_MUSIC_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MUSIC_SKELETON))
#define GOA_IS_MUSIC_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MUSIC_SKELETON))

typedef struct _GoaMusicSkeleton GoaMusicSkeleton;
typedef struct _GoaMusicSkeletonClass GoaMusicSkeletonClass;
typedef struct _GoaMusicSkeletonPrivate GoaMusicSkeletonPrivate;

struct _GoaMusicSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaMusicSkeletonPrivate *priv;
};

struct _GoaMusicSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_music_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMusicSkeleton, g_object_unref)
#endif

GoaMusic *goa_music_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Photos */

#define GOA_TYPE_PHOTOS (goa_photos_get_type ())
#define GOA_PHOTOS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PHOTOS, GoaPhotos))
#define GOA_IS_PHOTOS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PHOTOS))
#define GOA_PHOTOS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_PHOTOS, GoaPhotosIface))

struct _GoaPhotos;
typedef struct _GoaPhotos GoaPhotos;
typedef struct _GoaPhotosIface GoaPhotosIface;

struct _GoaPhotosIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPhotos, g_object_unref)
#endif

GType goa_photos_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_photos_interface_info (void);
guint goa_photos_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_PHOTOS_PROXY (goa_photos_proxy_get_type ())
#define GOA_PHOTOS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PHOTOS_PROXY, GoaPhotosProxy))
#define GOA_PHOTOS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_PHOTOS_PROXY, GoaPhotosProxyClass))
#define GOA_PHOTOS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_PHOTOS_PROXY, GoaPhotosProxyClass))
#define GOA_IS_PHOTOS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PHOTOS_PROXY))
#define GOA_IS_PHOTOS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_PHOTOS_PROXY))

typedef struct _GoaPhotosProxy GoaPhotosProxy;
typedef struct _GoaPhotosProxyClass GoaPhotosProxyClass;
typedef struct _GoaPhotosProxyPrivate GoaPhotosProxyPrivate;

struct _GoaPhotosProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaPhotosProxyPrivate *priv;
};

struct _GoaPhotosProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_photos_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPhotosProxy, g_object_unref)
#endif

void goa_photos_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaPhotos *goa_photos_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaPhotos *goa_photos_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_photos_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaPhotos *goa_photos_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaPhotos *goa_photos_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_PHOTOS_SKELETON (goa_photos_skeleton_get_type ())
#define GOA_PHOTOS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PHOTOS_SKELETON, GoaPhotosSkeleton))
#define GOA_PHOTOS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_PHOTOS_SKELETON, GoaPhotosSkeletonClass))
#define GOA_PHOTOS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_PHOTOS_SKELETON, GoaPhotosSkeletonClass))
#define GOA_IS_PHOTOS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PHOTOS_SKELETON))
#define GOA_IS_PHOTOS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_PHOTOS_SKELETON))

typedef struct _GoaPhotosSkeleton GoaPhotosSkeleton;
typedef struct _GoaPhotosSkeletonClass GoaPhotosSkeletonClass;
typedef struct _GoaPhotosSkeletonPrivate GoaPhotosSkeletonPrivate;

struct _GoaPhotosSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaPhotosSkeletonPrivate *priv;
};

struct _GoaPhotosSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_photos_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPhotosSkeleton, g_object_unref)
#endif

GoaPhotos *goa_photos_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Files */

#define GOA_TYPE_FILES (goa_files_get_type ())
#define GOA_FILES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_FILES, GoaFiles))
#define GOA_IS_FILES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_FILES))
#define GOA_FILES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_FILES, GoaFilesIface))

struct _GoaFiles;
typedef struct _GoaFiles GoaFiles;
typedef struct _GoaFilesIface GoaFilesIface;

struct _GoaFilesIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_accept_ssl_errors) (GoaFiles *object);

  const gchar * (*get_uri) (GoaFiles *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaFiles, g_object_unref)
#endif

GType goa_files_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_files_interface_info (void);
guint goa_files_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean goa_files_get_accept_ssl_errors (GoaFiles *object);
void goa_files_set_accept_ssl_errors (GoaFiles *object, gboolean value);

const gchar *goa_files_get_uri (GoaFiles *object);
gchar *goa_files_dup_uri (GoaFiles *object);
void goa_files_set_uri (GoaFiles *object, const gchar *value);


/* ---- */

#define GOA_TYPE_FILES_PROXY (goa_files_proxy_get_type ())
#define GOA_FILES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_FILES_PROXY, GoaFilesProxy))
#define GOA_FILES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_FILES_PROXY, GoaFilesProxyClass))
#define GOA_FILES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_FILES_PROXY, GoaFilesProxyClass))
#define GOA_IS_FILES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_FILES_PROXY))
#define GOA_IS_FILES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_FILES_PROXY))

typedef struct _GoaFilesProxy GoaFilesProxy;
typedef struct _GoaFilesProxyClass GoaFilesProxyClass;
typedef struct _GoaFilesProxyPrivate GoaFilesProxyPrivate;

struct _GoaFilesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaFilesProxyPrivate *priv;
};

struct _GoaFilesProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_files_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaFilesProxy, g_object_unref)
#endif

void goa_files_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaFiles *goa_files_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaFiles *goa_files_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_files_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaFiles *goa_files_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaFiles *goa_files_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_FILES_SKELETON (goa_files_skeleton_get_type ())
#define GOA_FILES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_FILES_SKELETON, GoaFilesSkeleton))
#define GOA_FILES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_FILES_SKELETON, GoaFilesSkeletonClass))
#define GOA_FILES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_FILES_SKELETON, GoaFilesSkeletonClass))
#define GOA_IS_FILES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_FILES_SKELETON))
#define GOA_IS_FILES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_FILES_SKELETON))

typedef struct _GoaFilesSkeleton GoaFilesSkeleton;
typedef struct _GoaFilesSkeletonClass GoaFilesSkeletonClass;
typedef struct _GoaFilesSkeletonPrivate GoaFilesSkeletonPrivate;

struct _GoaFilesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaFilesSkeletonPrivate *priv;
};

struct _GoaFilesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_files_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaFilesSkeleton, g_object_unref)
#endif

GoaFiles *goa_files_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Exchange */

#define GOA_TYPE_EXCHANGE (goa_exchange_get_type ())
#define GOA_EXCHANGE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_EXCHANGE, GoaExchange))
#define GOA_IS_EXCHANGE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_EXCHANGE))
#define GOA_EXCHANGE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_EXCHANGE, GoaExchangeIface))

struct _GoaExchange;
typedef struct _GoaExchange GoaExchange;
typedef struct _GoaExchangeIface GoaExchangeIface;

struct _GoaExchangeIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_host) (GoaExchange *object);

  gboolean  (*get_accept_ssl_errors) (GoaExchange *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaExchange, g_object_unref)
#endif

GType goa_exchange_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_exchange_interface_info (void);
guint goa_exchange_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean goa_exchange_get_accept_ssl_errors (GoaExchange *object);
void goa_exchange_set_accept_ssl_errors (GoaExchange *object, gboolean value);

const gchar *goa_exchange_get_host (GoaExchange *object);
gchar *goa_exchange_dup_host (GoaExchange *object);
void goa_exchange_set_host (GoaExchange *object, const gchar *value);


/* ---- */

#define GOA_TYPE_EXCHANGE_PROXY (goa_exchange_proxy_get_type ())
#define GOA_EXCHANGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_EXCHANGE_PROXY, GoaExchangeProxy))
#define GOA_EXCHANGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_EXCHANGE_PROXY, GoaExchangeProxyClass))
#define GOA_EXCHANGE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_EXCHANGE_PROXY, GoaExchangeProxyClass))
#define GOA_IS_EXCHANGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_EXCHANGE_PROXY))
#define GOA_IS_EXCHANGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_EXCHANGE_PROXY))

typedef struct _GoaExchangeProxy GoaExchangeProxy;
typedef struct _GoaExchangeProxyClass GoaExchangeProxyClass;
typedef struct _GoaExchangeProxyPrivate GoaExchangeProxyPrivate;

struct _GoaExchangeProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaExchangeProxyPrivate *priv;
};

struct _GoaExchangeProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_exchange_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaExchangeProxy, g_object_unref)
#endif

void goa_exchange_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaExchange *goa_exchange_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaExchange *goa_exchange_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_exchange_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaExchange *goa_exchange_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaExchange *goa_exchange_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_EXCHANGE_SKELETON (goa_exchange_skeleton_get_type ())
#define GOA_EXCHANGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_EXCHANGE_SKELETON, GoaExchangeSkeleton))
#define GOA_EXCHANGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_EXCHANGE_SKELETON, GoaExchangeSkeletonClass))
#define GOA_EXCHANGE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_EXCHANGE_SKELETON, GoaExchangeSkeletonClass))
#define GOA_IS_EXCHANGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_EXCHANGE_SKELETON))
#define GOA_IS_EXCHANGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_EXCHANGE_SKELETON))

typedef struct _GoaExchangeSkeleton GoaExchangeSkeleton;
typedef struct _GoaExchangeSkeletonClass GoaExchangeSkeletonClass;
typedef struct _GoaExchangeSkeletonPrivate GoaExchangeSkeletonPrivate;

struct _GoaExchangeSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaExchangeSkeletonPrivate *priv;
};

struct _GoaExchangeSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_exchange_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaExchangeSkeleton, g_object_unref)
#endif

GoaExchange *goa_exchange_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.MediaServer */

#define GOA_TYPE_MEDIA_SERVER (goa_media_server_get_type ())
#define GOA_MEDIA_SERVER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MEDIA_SERVER, GoaMediaServer))
#define GOA_IS_MEDIA_SERVER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MEDIA_SERVER))
#define GOA_MEDIA_SERVER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_MEDIA_SERVER, GoaMediaServerIface))

struct _GoaMediaServer;
typedef struct _GoaMediaServer GoaMediaServer;
typedef struct _GoaMediaServerIface GoaMediaServerIface;

struct _GoaMediaServerIface
{
  GTypeInterface parent_iface;

  gboolean  (*get_dlna_supported) (GoaMediaServer *object);

  const gchar * (*get_udn) (GoaMediaServer *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMediaServer, g_object_unref)
#endif

GType goa_media_server_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_media_server_interface_info (void);
guint goa_media_server_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
gboolean goa_media_server_get_dlna_supported (GoaMediaServer *object);
void goa_media_server_set_dlna_supported (GoaMediaServer *object, gboolean value);

const gchar *goa_media_server_get_udn (GoaMediaServer *object);
gchar *goa_media_server_dup_udn (GoaMediaServer *object);
void goa_media_server_set_udn (GoaMediaServer *object, const gchar *value);


/* ---- */

#define GOA_TYPE_MEDIA_SERVER_PROXY (goa_media_server_proxy_get_type ())
#define GOA_MEDIA_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MEDIA_SERVER_PROXY, GoaMediaServerProxy))
#define GOA_MEDIA_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MEDIA_SERVER_PROXY, GoaMediaServerProxyClass))
#define GOA_MEDIA_SERVER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MEDIA_SERVER_PROXY, GoaMediaServerProxyClass))
#define GOA_IS_MEDIA_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MEDIA_SERVER_PROXY))
#define GOA_IS_MEDIA_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MEDIA_SERVER_PROXY))

typedef struct _GoaMediaServerProxy GoaMediaServerProxy;
typedef struct _GoaMediaServerProxyClass GoaMediaServerProxyClass;
typedef struct _GoaMediaServerProxyPrivate GoaMediaServerProxyPrivate;

struct _GoaMediaServerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaMediaServerProxyPrivate *priv;
};

struct _GoaMediaServerProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_media_server_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMediaServerProxy, g_object_unref)
#endif

void goa_media_server_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMediaServer *goa_media_server_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMediaServer *goa_media_server_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_media_server_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaMediaServer *goa_media_server_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaMediaServer *goa_media_server_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_MEDIA_SERVER_SKELETON (goa_media_server_skeleton_get_type ())
#define GOA_MEDIA_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_MEDIA_SERVER_SKELETON, GoaMediaServerSkeleton))
#define GOA_MEDIA_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_MEDIA_SERVER_SKELETON, GoaMediaServerSkeletonClass))
#define GOA_MEDIA_SERVER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_MEDIA_SERVER_SKELETON, GoaMediaServerSkeletonClass))
#define GOA_IS_MEDIA_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_MEDIA_SERVER_SKELETON))
#define GOA_IS_MEDIA_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_MEDIA_SERVER_SKELETON))

typedef struct _GoaMediaServerSkeleton GoaMediaServerSkeleton;
typedef struct _GoaMediaServerSkeletonClass GoaMediaServerSkeletonClass;
typedef struct _GoaMediaServerSkeletonPrivate GoaMediaServerSkeletonPrivate;

struct _GoaMediaServerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaMediaServerSkeletonPrivate *priv;
};

struct _GoaMediaServerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_media_server_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaMediaServerSkeleton, g_object_unref)
#endif

GoaMediaServer *goa_media_server_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Ticketing */

#define GOA_TYPE_TICKETING (goa_ticketing_get_type ())
#define GOA_TICKETING(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_TICKETING, GoaTicketing))
#define GOA_IS_TICKETING(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_TICKETING))
#define GOA_TICKETING_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_TICKETING, GoaTicketingIface))

struct _GoaTicketing;
typedef struct _GoaTicketing GoaTicketing;
typedef struct _GoaTicketingIface GoaTicketingIface;

struct _GoaTicketingIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_ticket) (
    GoaTicketing *object,
    GDBusMethodInvocation *invocation);

  GVariant * (*get_details) (GoaTicketing *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaTicketing, g_object_unref)
#endif

GType goa_ticketing_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_ticketing_interface_info (void);
guint goa_ticketing_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void goa_ticketing_complete_get_ticket (
    GoaTicketing *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void goa_ticketing_call_get_ticket (
    GoaTicketing *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean goa_ticketing_call_get_ticket_finish (
    GoaTicketing *proxy,
    GAsyncResult *res,
    GError **error);

gboolean goa_ticketing_call_get_ticket_sync (
    GoaTicketing *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
GVariant *goa_ticketing_get_details (GoaTicketing *object);
GVariant *goa_ticketing_dup_details (GoaTicketing *object);
void goa_ticketing_set_details (GoaTicketing *object, GVariant *value);


/* ---- */

#define GOA_TYPE_TICKETING_PROXY (goa_ticketing_proxy_get_type ())
#define GOA_TICKETING_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_TICKETING_PROXY, GoaTicketingProxy))
#define GOA_TICKETING_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_TICKETING_PROXY, GoaTicketingProxyClass))
#define GOA_TICKETING_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_TICKETING_PROXY, GoaTicketingProxyClass))
#define GOA_IS_TICKETING_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_TICKETING_PROXY))
#define GOA_IS_TICKETING_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_TICKETING_PROXY))

typedef struct _GoaTicketingProxy GoaTicketingProxy;
typedef struct _GoaTicketingProxyClass GoaTicketingProxyClass;
typedef struct _GoaTicketingProxyPrivate GoaTicketingProxyPrivate;

struct _GoaTicketingProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaTicketingProxyPrivate *priv;
};

struct _GoaTicketingProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_ticketing_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaTicketingProxy, g_object_unref)
#endif

void goa_ticketing_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaTicketing *goa_ticketing_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaTicketing *goa_ticketing_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_ticketing_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaTicketing *goa_ticketing_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaTicketing *goa_ticketing_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_TICKETING_SKELETON (goa_ticketing_skeleton_get_type ())
#define GOA_TICKETING_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_TICKETING_SKELETON, GoaTicketingSkeleton))
#define GOA_TICKETING_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_TICKETING_SKELETON, GoaTicketingSkeletonClass))
#define GOA_TICKETING_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_TICKETING_SKELETON, GoaTicketingSkeletonClass))
#define GOA_IS_TICKETING_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_TICKETING_SKELETON))
#define GOA_IS_TICKETING_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_TICKETING_SKELETON))

typedef struct _GoaTicketingSkeleton GoaTicketingSkeleton;
typedef struct _GoaTicketingSkeletonClass GoaTicketingSkeletonClass;
typedef struct _GoaTicketingSkeletonPrivate GoaTicketingSkeletonPrivate;

struct _GoaTicketingSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaTicketingSkeletonPrivate *priv;
};

struct _GoaTicketingSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_ticketing_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaTicketingSkeleton, g_object_unref)
#endif

GoaTicketing *goa_ticketing_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Todo */

#define GOA_TYPE_TODO (goa_todo_get_type ())
#define GOA_TODO(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_TODO, GoaTodo))
#define GOA_IS_TODO(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_TODO))
#define GOA_TODO_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_TODO, GoaTodoIface))

struct _GoaTodo;
typedef struct _GoaTodo GoaTodo;
typedef struct _GoaTodoIface GoaTodoIface;

struct _GoaTodoIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaTodo, g_object_unref)
#endif

GType goa_todo_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_todo_interface_info (void);
guint goa_todo_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_TODO_PROXY (goa_todo_proxy_get_type ())
#define GOA_TODO_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_TODO_PROXY, GoaTodoProxy))
#define GOA_TODO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_TODO_PROXY, GoaTodoProxyClass))
#define GOA_TODO_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_TODO_PROXY, GoaTodoProxyClass))
#define GOA_IS_TODO_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_TODO_PROXY))
#define GOA_IS_TODO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_TODO_PROXY))

typedef struct _GoaTodoProxy GoaTodoProxy;
typedef struct _GoaTodoProxyClass GoaTodoProxyClass;
typedef struct _GoaTodoProxyPrivate GoaTodoProxyPrivate;

struct _GoaTodoProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaTodoProxyPrivate *priv;
};

struct _GoaTodoProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_todo_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaTodoProxy, g_object_unref)
#endif

G_GNUC_DEPRECATED void goa_todo_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
G_GNUC_DEPRECATED GoaTodo *goa_todo_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
G_GNUC_DEPRECATED GoaTodo *goa_todo_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

G_GNUC_DEPRECATED void goa_todo_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
G_GNUC_DEPRECATED GoaTodo *goa_todo_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
G_GNUC_DEPRECATED GoaTodo *goa_todo_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_TODO_SKELETON (goa_todo_skeleton_get_type ())
#define GOA_TODO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_TODO_SKELETON, GoaTodoSkeleton))
#define GOA_TODO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_TODO_SKELETON, GoaTodoSkeletonClass))
#define GOA_TODO_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_TODO_SKELETON, GoaTodoSkeletonClass))
#define GOA_IS_TODO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_TODO_SKELETON))
#define GOA_IS_TODO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_TODO_SKELETON))

typedef struct _GoaTodoSkeleton GoaTodoSkeleton;
typedef struct _GoaTodoSkeletonClass GoaTodoSkeletonClass;
typedef struct _GoaTodoSkeletonPrivate GoaTodoSkeletonPrivate;

struct _GoaTodoSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaTodoSkeletonPrivate *priv;
};

struct _GoaTodoSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_todo_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaTodoSkeleton, g_object_unref)
#endif

G_GNUC_DEPRECATED GoaTodo *goa_todo_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.ReadLater */

#define GOA_TYPE_READ_LATER (goa_read_later_get_type ())
#define GOA_READ_LATER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_READ_LATER, GoaReadLater))
#define GOA_IS_READ_LATER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_READ_LATER))
#define GOA_READ_LATER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_READ_LATER, GoaReadLaterIface))

struct _GoaReadLater;
typedef struct _GoaReadLater GoaReadLater;
typedef struct _GoaReadLaterIface GoaReadLaterIface;

struct _GoaReadLaterIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaReadLater, g_object_unref)
#endif

GType goa_read_later_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_read_later_interface_info (void);
guint goa_read_later_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_READ_LATER_PROXY (goa_read_later_proxy_get_type ())
#define GOA_READ_LATER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_READ_LATER_PROXY, GoaReadLaterProxy))
#define GOA_READ_LATER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_READ_LATER_PROXY, GoaReadLaterProxyClass))
#define GOA_READ_LATER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_READ_LATER_PROXY, GoaReadLaterProxyClass))
#define GOA_IS_READ_LATER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_READ_LATER_PROXY))
#define GOA_IS_READ_LATER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_READ_LATER_PROXY))

typedef struct _GoaReadLaterProxy GoaReadLaterProxy;
typedef struct _GoaReadLaterProxyClass GoaReadLaterProxyClass;
typedef struct _GoaReadLaterProxyPrivate GoaReadLaterProxyPrivate;

struct _GoaReadLaterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaReadLaterProxyPrivate *priv;
};

struct _GoaReadLaterProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_read_later_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaReadLaterProxy, g_object_unref)
#endif

G_GNUC_DEPRECATED void goa_read_later_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
G_GNUC_DEPRECATED GoaReadLater *goa_read_later_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
G_GNUC_DEPRECATED GoaReadLater *goa_read_later_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

G_GNUC_DEPRECATED void goa_read_later_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
G_GNUC_DEPRECATED GoaReadLater *goa_read_later_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
G_GNUC_DEPRECATED GoaReadLater *goa_read_later_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_READ_LATER_SKELETON (goa_read_later_skeleton_get_type ())
#define GOA_READ_LATER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_READ_LATER_SKELETON, GoaReadLaterSkeleton))
#define GOA_READ_LATER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_READ_LATER_SKELETON, GoaReadLaterSkeletonClass))
#define GOA_READ_LATER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_READ_LATER_SKELETON, GoaReadLaterSkeletonClass))
#define GOA_IS_READ_LATER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_READ_LATER_SKELETON))
#define GOA_IS_READ_LATER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_READ_LATER_SKELETON))

typedef struct _GoaReadLaterSkeleton GoaReadLaterSkeleton;
typedef struct _GoaReadLaterSkeletonClass GoaReadLaterSkeletonClass;
typedef struct _GoaReadLaterSkeletonPrivate GoaReadLaterSkeletonPrivate;

struct _GoaReadLaterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaReadLaterSkeletonPrivate *priv;
};

struct _GoaReadLaterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_read_later_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaReadLaterSkeleton, g_object_unref)
#endif

G_GNUC_DEPRECATED GoaReadLater *goa_read_later_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OnlineAccounts.Printers */

#define GOA_TYPE_PRINTERS (goa_printers_get_type ())
#define GOA_PRINTERS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PRINTERS, GoaPrinters))
#define GOA_IS_PRINTERS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PRINTERS))
#define GOA_PRINTERS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_PRINTERS, GoaPrintersIface))

struct _GoaPrinters;
typedef struct _GoaPrinters GoaPrinters;
typedef struct _GoaPrintersIface GoaPrintersIface;

struct _GoaPrintersIface
{
  GTypeInterface parent_iface;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPrinters, g_object_unref)
#endif

GType goa_printers_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *goa_printers_interface_info (void);
guint goa_printers_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define GOA_TYPE_PRINTERS_PROXY (goa_printers_proxy_get_type ())
#define GOA_PRINTERS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PRINTERS_PROXY, GoaPrintersProxy))
#define GOA_PRINTERS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_PRINTERS_PROXY, GoaPrintersProxyClass))
#define GOA_PRINTERS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_PRINTERS_PROXY, GoaPrintersProxyClass))
#define GOA_IS_PRINTERS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PRINTERS_PROXY))
#define GOA_IS_PRINTERS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_PRINTERS_PROXY))

typedef struct _GoaPrintersProxy GoaPrintersProxy;
typedef struct _GoaPrintersProxyClass GoaPrintersProxyClass;
typedef struct _GoaPrintersProxyPrivate GoaPrintersProxyPrivate;

struct _GoaPrintersProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GoaPrintersProxyPrivate *priv;
};

struct _GoaPrintersProxyClass
{
  GDBusProxyClass parent_class;
};

GType goa_printers_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPrintersProxy, g_object_unref)
#endif

void goa_printers_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaPrinters *goa_printers_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GoaPrinters *goa_printers_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void goa_printers_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GoaPrinters *goa_printers_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GoaPrinters *goa_printers_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GOA_TYPE_PRINTERS_SKELETON (goa_printers_skeleton_get_type ())
#define GOA_PRINTERS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_PRINTERS_SKELETON, GoaPrintersSkeleton))
#define GOA_PRINTERS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_PRINTERS_SKELETON, GoaPrintersSkeletonClass))
#define GOA_PRINTERS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_PRINTERS_SKELETON, GoaPrintersSkeletonClass))
#define GOA_IS_PRINTERS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_PRINTERS_SKELETON))
#define GOA_IS_PRINTERS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_PRINTERS_SKELETON))

typedef struct _GoaPrintersSkeleton GoaPrintersSkeleton;
typedef struct _GoaPrintersSkeletonClass GoaPrintersSkeletonClass;
typedef struct _GoaPrintersSkeletonPrivate GoaPrintersSkeletonPrivate;

struct _GoaPrintersSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GoaPrintersSkeletonPrivate *priv;
};

struct _GoaPrintersSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType goa_printers_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaPrintersSkeleton, g_object_unref)
#endif

GoaPrinters *goa_printers_skeleton_new (void);


/* ---- */

#define GOA_TYPE_OBJECT (goa_object_get_type ())
#define GOA_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OBJECT, GoaObject))
#define GOA_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OBJECT))
#define GOA_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GOA_TYPE_OBJECT, GoaObject))

struct _GoaObject;
typedef struct _GoaObject GoaObject;
typedef struct _GoaObjectIface GoaObjectIface;

struct _GoaObjectIface
{
  GTypeInterface parent_iface;
};

GType goa_object_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaObject, g_object_unref)
#endif

GoaAccount *goa_object_get_account (GoaObject *object);
GoaOAuth2Based *goa_object_get_oauth2_based (GoaObject *object);
GoaOAuthBased *goa_object_get_oauth_based (GoaObject *object);
GoaPasswordBased *goa_object_get_password_based (GoaObject *object);
GoaManager *goa_object_get_manager (GoaObject *object);
GoaMail *goa_object_get_mail (GoaObject *object);
GoaCalendar *goa_object_get_calendar (GoaObject *object);
GoaContacts *goa_object_get_contacts (GoaObject *object);
GoaChat *goa_object_get_chat (GoaObject *object);
G_GNUC_DEPRECATED GoaDocuments *goa_object_get_documents (GoaObject *object);
GoaMaps *goa_object_get_maps (GoaObject *object);
GoaMusic *goa_object_get_music (GoaObject *object);
GoaPhotos *goa_object_get_photos (GoaObject *object);
GoaFiles *goa_object_get_files (GoaObject *object);
GoaExchange *goa_object_get_exchange (GoaObject *object);
GoaMediaServer *goa_object_get_media_server (GoaObject *object);
GoaTicketing *goa_object_get_ticketing (GoaObject *object);
G_GNUC_DEPRECATED GoaTodo *goa_object_get_todo (GoaObject *object);
G_GNUC_DEPRECATED GoaReadLater *goa_object_get_read_later (GoaObject *object);
GoaPrinters *goa_object_get_printers (GoaObject *object);
GoaAccount *goa_object_peek_account (GoaObject *object);
GoaOAuth2Based *goa_object_peek_oauth2_based (GoaObject *object);
GoaOAuthBased *goa_object_peek_oauth_based (GoaObject *object);
GoaPasswordBased *goa_object_peek_password_based (GoaObject *object);
GoaManager *goa_object_peek_manager (GoaObject *object);
GoaMail *goa_object_peek_mail (GoaObject *object);
GoaCalendar *goa_object_peek_calendar (GoaObject *object);
GoaContacts *goa_object_peek_contacts (GoaObject *object);
GoaChat *goa_object_peek_chat (GoaObject *object);
G_GNUC_DEPRECATED GoaDocuments *goa_object_peek_documents (GoaObject *object);
GoaMaps *goa_object_peek_maps (GoaObject *object);
GoaMusic *goa_object_peek_music (GoaObject *object);
GoaPhotos *goa_object_peek_photos (GoaObject *object);
GoaFiles *goa_object_peek_files (GoaObject *object);
GoaExchange *goa_object_peek_exchange (GoaObject *object);
GoaMediaServer *goa_object_peek_media_server (GoaObject *object);
GoaTicketing *goa_object_peek_ticketing (GoaObject *object);
G_GNUC_DEPRECATED GoaTodo *goa_object_peek_todo (GoaObject *object);
G_GNUC_DEPRECATED GoaReadLater *goa_object_peek_read_later (GoaObject *object);
GoaPrinters *goa_object_peek_printers (GoaObject *object);

#define GOA_TYPE_OBJECT_PROXY (goa_object_proxy_get_type ())
#define GOA_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OBJECT_PROXY, GoaObjectProxy))
#define GOA_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OBJECT_PROXY, GoaObjectProxyClass))
#define GOA_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OBJECT_PROXY, GoaObjectProxyClass))
#define GOA_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OBJECT_PROXY))
#define GOA_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OBJECT_PROXY))

typedef struct _GoaObjectProxy GoaObjectProxy;
typedef struct _GoaObjectProxyClass GoaObjectProxyClass;
typedef struct _GoaObjectProxyPrivate GoaObjectProxyPrivate;

struct _GoaObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  GoaObjectProxyPrivate *priv;
};

struct _GoaObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType goa_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaObjectProxy, g_object_unref)
#endif

GoaObjectProxy *goa_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define GOA_TYPE_OBJECT_SKELETON (goa_object_skeleton_get_type ())
#define GOA_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OBJECT_SKELETON, GoaObjectSkeleton))
#define GOA_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OBJECT_SKELETON, GoaObjectSkeletonClass))
#define GOA_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OBJECT_SKELETON, GoaObjectSkeletonClass))
#define GOA_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OBJECT_SKELETON))
#define GOA_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OBJECT_SKELETON))

typedef struct _GoaObjectSkeleton GoaObjectSkeleton;
typedef struct _GoaObjectSkeletonClass GoaObjectSkeletonClass;
typedef struct _GoaObjectSkeletonPrivate GoaObjectSkeletonPrivate;

struct _GoaObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  GoaObjectSkeletonPrivate *priv;
};

struct _GoaObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType goa_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaObjectSkeleton, g_object_unref)
#endif

GoaObjectSkeleton *goa_object_skeleton_new (const gchar *object_path);
void goa_object_skeleton_set_account (GoaObjectSkeleton *object, GoaAccount *interface_);
void goa_object_skeleton_set_oauth2_based (GoaObjectSkeleton *object, GoaOAuth2Based *interface_);
void goa_object_skeleton_set_oauth_based (GoaObjectSkeleton *object, GoaOAuthBased *interface_);
void goa_object_skeleton_set_password_based (GoaObjectSkeleton *object, GoaPasswordBased *interface_);
void goa_object_skeleton_set_manager (GoaObjectSkeleton *object, GoaManager *interface_);
void goa_object_skeleton_set_mail (GoaObjectSkeleton *object, GoaMail *interface_);
void goa_object_skeleton_set_calendar (GoaObjectSkeleton *object, GoaCalendar *interface_);
void goa_object_skeleton_set_contacts (GoaObjectSkeleton *object, GoaContacts *interface_);
void goa_object_skeleton_set_chat (GoaObjectSkeleton *object, GoaChat *interface_);
G_GNUC_DEPRECATED void goa_object_skeleton_set_documents (GoaObjectSkeleton *object, GoaDocuments *interface_);
void goa_object_skeleton_set_maps (GoaObjectSkeleton *object, GoaMaps *interface_);
void goa_object_skeleton_set_music (GoaObjectSkeleton *object, GoaMusic *interface_);
void goa_object_skeleton_set_photos (GoaObjectSkeleton *object, GoaPhotos *interface_);
void goa_object_skeleton_set_files (GoaObjectSkeleton *object, GoaFiles *interface_);
void goa_object_skeleton_set_exchange (GoaObjectSkeleton *object, GoaExchange *interface_);
void goa_object_skeleton_set_media_server (GoaObjectSkeleton *object, GoaMediaServer *interface_);
void goa_object_skeleton_set_ticketing (GoaObjectSkeleton *object, GoaTicketing *interface_);
G_GNUC_DEPRECATED void goa_object_skeleton_set_todo (GoaObjectSkeleton *object, GoaTodo *interface_);
G_GNUC_DEPRECATED void goa_object_skeleton_set_read_later (GoaObjectSkeleton *object, GoaReadLater *interface_);
void goa_object_skeleton_set_printers (GoaObjectSkeleton *object, GoaPrinters *interface_);

/* ---- */

#define GOA_TYPE_OBJECT_MANAGER_CLIENT (goa_object_manager_client_get_type ())
#define GOA_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OBJECT_MANAGER_CLIENT, GoaObjectManagerClient))
#define GOA_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OBJECT_MANAGER_CLIENT, GoaObjectManagerClientClass))
#define GOA_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OBJECT_MANAGER_CLIENT, GoaObjectManagerClientClass))
#define GOA_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OBJECT_MANAGER_CLIENT))
#define GOA_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _GoaObjectManagerClient GoaObjectManagerClient;
typedef struct _GoaObjectManagerClientClass GoaObjectManagerClientClass;
typedef struct _GoaObjectManagerClientPrivate GoaObjectManagerClientPrivate;

struct _GoaObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  GoaObjectManagerClientPrivate *priv;
};

struct _GoaObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GoaObjectManagerClient, g_object_unref)
#endif

GType goa_object_manager_client_get_type (void) G_GNUC_CONST;

GType goa_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void goa_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *goa_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *goa_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void goa_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *goa_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *goa_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __GOA_GENERATED_H__ */
